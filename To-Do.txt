#################
#### TO - DO ####
#################

###############
#### Debug ####
###############
- theoretically everything from Wedel (2012) should be implemented by now
- problem: the output doesn't look as supposed to
- currently start exemplar clouds 'implode' after ca. 100 iterations -> population vectors pull to strongly towards the center of category?
	- line 475 should be where Andy's code has population vectors
- then they start crawling towards the center -> anti ambiguity not working properly?
	- Andy implements anti ambiguity bias at line 663
- two different versions of anti ambiguity bias
	- 1. take highest cat sim score, reciprocal of that score divided by sum of similarity to all cats is the probability of not being stored (Wedel, 2012, p.37)
		- tried to implement this in aab_store2 method but I don't fully understand what's going on, how to get a value btw 0 and 1,...
	- 2. generate random value btw 0 and 1
- maybe also seeding could be the problem?
	- Andy is seeding at line 152 -> with 99 exemplars?
	
- Anti ambiguity bias not working due to 'underflow'? See comment in receive method for explanation
-> result is that effectively all exemplars are stored
- There is less underflow

##################
#### Plotting ####
##################

- make the space plots prettier in general
- also plot activation values of exemplars on a third dimension -> meh
- Andy's suggestion: opaqueness of points as third dimension, or heatmap
- Use different colors/shapes for each word category (as Andy did) -> DONE
- For the presentation maybe an animated plot? (https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/)


#######################
#### Toggle biases ####
#######################

- nice to have some function/method to activate/deactivate the biases, for presentation but also to compare to Andy's vids to see if our model does the expected thing








##############
#### DONE ####
##############

####################
#### Perception ####
####################

- currently we have Nosofsky's generalized context model (minus its bias term)
- similar as in production, we need to take activation into account
- implement it in Andy's way
- implement the anti-ambiguity bias
- if not mistaken, Andy picks random number between 0 and 1, and compares it with the highest similarity score of the categories. If random num > highest sim, discard, if random num < highest sim, store it

##########################
#### Production noise ####
##########################

- appendix Eq 2 in Wedel(2012)
- we do have sth similar in the produce method
- maybe need to adjust more to Andy's formula

############################
#### Population vectors ####
############################

- we do have a class method (currently named p_vec) to generate a word level population vector -> maybe rename as p_vec_word or similar
- we also need a method p_vec_seg (or similar) to generate a segment level population vector
- if not mistaken, this should be relatively straightforward: instead of comparing target exemplar with every exemplar of word category, we compare it to all exemplars in the space? Need to think about if this is correct...
- once we have both population vectors, we do a weighted average of them, with a 0.9 weight for the word level pop vec
- in Andy's code it was just something like (9*pop_vec_word+pop_vec_seg)/10 or similar
- this can be done within the 'produce' class method

########################
#### Space seeding  ####
########################
 
 - modify agent class init method
 - choose central point for each word cat: [25,25],[75,25],[25,75],[75,75]
 - randomly generate some exemplars around that point to generate initial category 'cloud'
 